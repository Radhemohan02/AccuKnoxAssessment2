import psutil
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(filename='system_health.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Thresholds
CPU_THRESHOLD = 80.0  # in percent
MEMORY_THRESHOLD = 80.0  # in percent
DISK_THRESHOLD = 80.0  # in percent

def check_cpu_usage():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        logging.warning(f'High CPU Usage: {cpu_usage}%')
        print(f'High CPU Usage: {cpu_usage}%')

def check_memory_usage():
    memory = psutil.virtual_memory()
    memory_usage = memory.percent
    if memory_usage > MEMORY_THRESHOLD:
        logging.warning(f'High Memory Usage: {memory_usage}%')
        print(f'High Memory Usage: {memory_usage}%')

def check_disk_usage():
    disk = psutil.disk_usage('/')
    disk_usage = disk.percent
    if disk_usage > DISK_THRESHOLD:
        logging.warning(f'High Disk Usage: {disk_usage}%')
        print(f'High Disk Usage: {disk_usage}%')

def check_running_processes():
    processes = [p.info for p in psutil.process_iter(attrs=['pid', 'name', 'cpu_percent', 'memory_percent'])]
    high_cpu_processes = [p for p in processes if p['cpu_percent'] > 50]  # threshold for processes
    if high_cpu_processes:
        logging.warning('High CPU Processes:')
        for p in high_cpu_processes:
            logging.warning(f'PID: {p["pid"]}, Name: {p["name"]}, CPU: {p["cpu_percent"]}%, Memory: {p["memory_percent"]}%')
            print(f'PID: {p["pid"]}, Name: {p["name"]}, CPU: {p["cpu_percent"]}%, Memory: {p["memory_percent"]}%')

def main():
    check_cpu_usage()
    check_memory_usage()
    check_disk_usage()
    check_running_processes()

if __name__ == "__main__":
    main()
