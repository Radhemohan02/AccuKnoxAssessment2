import os
import subprocess
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(filename='backup_report.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Configuration
SOURCE_DIR = '/path/to/local/directory'
REMOTE_USER = 'username'
REMOTE_HOST = 'remote.server.com'
REMOTE_DIR = '/path/to/remote/directory'
EXCLUDE_LIST = ['*.tmp', '*.log']  # Add any files or patterns to exclude

def create_exclude_file(exclude_list):
    """Creates a temporary exclude file for rsync."""
    exclude_file = 'exclude.txt'
    with open(exclude_file, 'w') as f:
        for item in exclude_list:
            f.write(f"{item}\n")
    return exclude_file

def backup():
    """Perform the backup operation using rsync."""
    exclude_file = create_exclude_file(EXCLUDE_LIST)
    try:
        # Construct the rsync command
        rsync_command = [
            'rsync', '-avz', '--delete',
            f'--exclude-from={exclude_file}',
            SOURCE_DIR,
            f'{REMOTE_USER}@{REMOTE_HOST}:{REMOTE_DIR}'
        ]

        # Execute the rsync command
        result = subprocess.run(rsync_command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Log success
        logging.info("Backup successful.")
        logging.info(result.stdout.decode())
        print("Backup successful.")
    
    except subprocess.CalledProcessError as e:
        # Log failure
        logging.error("Backup failed.")
        logging.error(e.stderr.decode())
        print("Backup failed.")
    
    finally:
        # Clean up the exclude file
        if os.path.exists(exclude_file):
            os.remove(exclude_file)

if __name__ == "__main__":
    backup()
